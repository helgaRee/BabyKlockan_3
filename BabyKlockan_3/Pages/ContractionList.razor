@using BabyKlockan_3.Models
@using BabyKlockan_3.Services
@using System.Diagnostics
@inject ContractionService contractionService





@if (contractions.Count == 0)
{
    <p>Inga värkar loggade ännu.</p>
}
else
{
<div class="dataPresentation">
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Längd</th>
                <th>Vila</th>
            </tr>
        </thead>
        <tbody>


@* @foreach (var contraction in contractions)
{
    <tr>
        <td>@contraction.Number</td>
        <td>@contraction.Duration.ToString(@"mm\:ss")</td>
        <td class="data-rest">@contraction.RestTime?.ToString(@"mm\:ss")</td>
        <td>
            <button @onclick="() => RemoveContraction(contraction.Id)">Ta bort</button>
        </td>
    </tr>

} *@

                @for (int i = 0; i < contractions.Count; i++)
                {
                    var contraction = contractions[i];
                    var restTime = contraction.RestTime?.ToString(@"mm\:ss");

                    <tr>
                        <td>@contraction.Number</td>
                        <td>@contraction.Duration.ToString(@"mm\:ss")</td>

                        <td class="rest-visual">
                            @if (i > 0 && contraction.RestTime.HasValue)
                            {
                                <div class="rest-block">
                                    <span class="arrow">⟵</span>
                                    <span class="rest-time">@restTime</span>
                                </div>
                            }
                        </td>

                        <td>
                            <button @onclick="() => RemoveContraction(contraction.Id)" class="btn-remove">Ta bort</button>
                        </td>
                    </tr>
                }
            
        </tbody>
    </table>
    </div>
}

@code {
    //Parameter för att kunna ta emot värkar från föräldern
    [Parameter] public List<ContractionModel> contractions { get; set; } = new List<ContractionModel>();
    //EventCallback i din komponent som föräldern kan lyssna på för att ta emot uppdaterad lista.
    [Parameter] public EventCallback<List<ContractionModel>> OnContractionChange { get; set; }

    int counter = 1;


    //på Init, hämta alla värkar med data från service
    protected override void OnInitialized()
    {
        contractions = contractionService.GetAllContractions();
    }

    public void RefreshList()
    {
        //hämta hela listan och uppdatera sen UI
        contractions = contractionService.GetAllContractions();
        StateHasChanged();
    }

    private void RemoveContraction(Guid id)
    {
        Debug.WriteLine($"Värk nummer {id} är borttagen");

        //hitta värk att ta bort
        var contractionToRemove = contractions.FirstOrDefault(c => c.Id == id);
        if (contractionToRemove != null)
        {
            //ta brot från listan
            contractions.Remove(contractionToRemove);

            //Uppdatera UI
            StateHasChanged();
        }

    }


}