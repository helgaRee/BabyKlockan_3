@using BabyKlockan_3.Models
@using BabyKlockan_3.Services
@using System.Diagnostics
@using BlazorBootstrap
@inject ContractionService contractionService

@* skapar referens *@
<ConfirmDialog @ref="dialog" />

@*BARNKOMPONENT TILL TIMER: Visar värklista som tabell.

Kan visa alla sparade värkar (via ShowAllContractions()).

Kan radera enskilda värkar eller alla.

Använder ContractionService för datakommunikation. *@
<div class="container">
    <div class="position-absolute top-0 start-0">
      @*   <img class="logotype" src="/images/logotyp_.png" alt="Logotyp" /> *@
    </div>
    <div class="position-absolute top-0 end-0">
        <button class="btn btn-secondary" onclick="@ShowAllContractions">Visa alla sparade värkar</button>
    </div>
</div>




@if (contractions.Count == 0)
{
    <p>Inga värkar loggade ännu.</p>
}
else
{
    <div class="dataPresentation position-relative">
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Längd</th>
                <th>Vila</th>
                    <th><i class="fa-regular fa-trash-can"></i>X</th>
            </tr>
        </thead>
        <tbody>

                @for (int i = 0; i < contractions.Count; i++)
                {
                    var contraction = contractions[i];
                    var restTime = contraction.RestTime?.ToString(@"mm\:ss");

                    <tr>
                        <td>@contraction.Number</td>
                        <td>@contraction.Duration.ToString(@"mm\:ss")</td>

                        <td class="rest-visual">
                            @if (i > 0 && contraction.RestTime.HasValue)
                            {
                                <div class="rest-block">
                                    <span class="arrow">⟵<i class="fa-solid fa-arrow-left-long"></i></span>
                                    <span class="rest-time">@restTime</span>
                                </div>
                            }
                        </td>

                        <td class="">
                            <button @onclick="async () => await RemoveContraction(contraction.Id)" class="btn-remove">Ta bort</button>
                        </td>
                    </tr>
                }

            
      <div class="position-absolute bottom-0 end-0">
        <button class="btn btn-remove" @onclick="ShowConfirmationAsync">Rensa hela listan</button>
    </div> 
        </tbody>
    </table>

    </div>
}

@code {
    //Parameter för att kunna ta emot värkar från föräldern
    [Parameter] public List<ContractionModel> contractions { get; set; } = new List<ContractionModel>();
    //Definierar en EventCallback-parameter för att kunna skicka uppdaterad lista till föräldern (ContractionTimer)
    [Parameter] 
    public EventCallback<List<ContractionModel>> OnContractionChange { get; set; }


    private async Task ShowAllContractions()
    {
        contractions = await contractionService.GetAllContractionsAsync();
        //Anropa förälderns Metod genom EventCallback-anrop
        await OnContractionChange.InvokeAsync(contractions);

    }

    private async Task DeleteAllContractions()
    {
        await contractionService.ClearListAsync();
        //rensa listan i komponenten
        contractions.Clear();
        // StateHasChanged(); --> anropa istället förälderns metod genom EventCallback-anrop
        await OnContractionChange.InvokeAsync(contractions);
    }


    /// <summary>
    /// Tar bort värken från Listan
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>

    private async Task RemoveContraction(Guid id)
    {

        Debug.WriteLine($"Värk nummer {id} är borttagen");

        //anropa service, hämta data från db
        await contractionService.RemoveContractionByIdAsync(id);


        //Ta bort från UI-listan
        var contractionToRemove = contractions.FirstOrDefault(c => c.Id == id);
        if (contractionToRemove != null)
        {
            //ta brot från listan
            contractions.Remove(contractionToRemove);

            //Anropa förälderns Metod genom EventCallback-anrop
            await OnContractionChange.InvokeAsync(contractions);
        }

    }







    //deklarerar variable som motsvarar referensen
    private ConfirmDialog dialog = default!;


    private ConfirmDialogOptions options = new()
        {
            IsVerticallyCentered = true,
            IsScrollable = true
        };


    private async Task ShowConfirmationAsync()
    {

        Debug.WriteLine("inne i showconfirmationasyc debug");


        var confirmation = await dialog.ShowAsync(
            title: "Är du säker att du vill rensa hela listan?",
            message1: "Alla sparade värkar kommer tas bort, du kan inte ångra detta",
            message2: "Vill du fortsätta?",
             confirmDialogOptions: options);

        if (confirmation)
        {
            await contractionService.ClearListAsync();
            contractions.Clear();
            await OnContractionChange.InvokeAsync(contractions);

        }

    }











    //på Init, hämta alla värkar med data från service
    // protected override async Task OnInitializedAsync()
    // {
    //     contractions = await contractionService.GetAllContractionsAsync();
    // }




    // public async Task RefreshList()
    // {
    //     //hämta hela listan och uppdatera sen UI
    //     contractions = await contractionService.GetAllContractionsAsync();
    //     StateHasChanged();
    // }


}